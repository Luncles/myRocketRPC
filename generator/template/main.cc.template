/****************************************************
 *
 * ****     ***     ****    *   *    *****    *****
 * *  *    *   *   *        ****     ***        *
 * *   *    ***     ****    *   *    *****      *
 *
 * ${FILE_NAME}
 * ${CREATE_TIME}
 * Generated by myRocketRPC framework rocket_generator.py
 * Do not edit !!!
****************************************************/


#include <memory>
#include <google/protobuf/service.h>
#include "myRocketRPC/common/config.h"
#include "myRocketRPC/net/tcp/tcp_server.h"
#include "myRocketRPC/net/rpc/rpc_dispatcher.h"
#include "myRocketRPC/common/log.h"
#include "myRocketRPC/net/tcp/net_addr.h"
${INCLUDE_SERVER_HEADER}

int main(int argc, char *argv[])
{
  if (argc != 2)
  {
    printf("Start ${PROJECT_NAME} error, argc not 2 \n");
    printf("Start like this: \n");
    printf("./${PROJECT_NAME} ../conf/myRocket.xml \n");
    return 0;
  }
  myRocketRPC::Config::SetGlobalConfig(argv[1]);

  myRocketRPC::Logger::InitGlobalLogger();

  std::shared_ptr<${CLASS_NAME}> service = std::make_shared<${CLASS_NAME}>();

  myRocketRPC::RpcDispatcher::GetRpcDispatcher()->RegisterService(service);

  myRocketRPC::IPNetAddr::myNetAddrPtr addrPtr = std::make_shared<myRocketRPC::IPNetAddr>("127.0.0.1", myRocketRPC::Config::GetGlobalConfig()->myPort);

  printf("create address [%s]", addrPtr->ToString().c_str());
  
  myRocketRPC::TCPServer tcpServer(addrPtr);

  tcpServer.Start();

  return 0;
}