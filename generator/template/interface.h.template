/****************************************************
 *
 * ****     ***     ****    *   *    *****    *****
 * *  *    *   *   *        ****     ***        *
 * *   *    ***     ****    *   *    *****      *
 *
 * ${FILE_NAME}
 * ${CREATE_TIME}
 * Generated by myRocketRPC framework rocket_generator.py
 * File will not generate while exist
 * Allow editing
 * 对应于在proto文件中定义的每个方法，有几个方法就有几个interface
****************************************************/

#ifndef ${HEADER_DEFINE}
#define ${HEADER_DEFINE} 

#include <myRocketRPC/net/rpc/rpc_closure.h>
${INCLUDE_PB_HEADER}
${INCLUDE_INTERFACEBASE_HEADER_FILE}


namespace ${PROJECT_NAME} {

/*
 * Rpc Interface Class
 * Alloc one object every time RPC call begin, and destroy this object while RPC call end
*/

class ${CLASS_NAME} : public Interface {
 public:

  ${CLASS_NAME}(const ${REQUEST_TYPE}* request, ${RESPONSE_TYPE}* response, 
    myRocketRPC::RpcClosure* done, myRocketRPC::RpcController* controller);

  ~${CLASS_NAME}();

 public:
  // core business deal method
  virtual void run() override;

  // set error code and error into to response message
  virtual void setError(int code, const std::string& err_info) override;

 private:
  const ${REQUEST_TYPE}* m_request {NULL};       // request object fron client

  ${RESPONSE_TYPE}* m_response {NULL};           // response object that reply to client

};


}


#endif